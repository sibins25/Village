// 1. Scroll-triggered fade-in animation
document.addEventListener("DOMContentLoaded", function () {
  const animatedEls = document.querySelectorAll('.scroll-animate');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.15 });
  animatedEls.forEach(el => observer.observe(el));
});

// 2. Side menu logic
document.addEventListener("DOMContentLoaded", function() {
  const menuBtn = document.getElementById('menuBtn');
  const sideMenu = document.getElementById('sideMenu');
  const closeMenu = document.getElementById('closeMenu');
  const menuOverlay = document.getElementById('menuOverlay');
  menuBtn.onclick = () => {
    sideMenu.classList.add('open');
    menuOverlay.classList.remove('hidden');
    menuOverlay.classList.add('show');
  };
  closeMenu.onclick = closeMenuAndOverlay;
  menuOverlay.onclick = closeMenuAndOverlay;
  function closeMenuAndOverlay() {
    sideMenu.classList.remove('open');
    menuOverlay.classList.add('hidden');
    menuOverlay.classList.remove('show');
  }
  document.querySelectorAll('.menu-link').forEach(link => {
    link.onclick = () => {
      closeMenuAndOverlay();
    };
  });
});

// 3. Language switcher logic
document.addEventListener("DOMContentLoaded", function() {
  const langBtn = document.getElementById('langBtn');
  const langDropdown = document.getElementById('langDropdown');
  langBtn.onclick = (e) => {
    e.stopPropagation();
    langDropdown.classList.toggle('hidden');
  };
  document.body.onclick = () => {
    langDropdown.classList.add('hidden');
  };
  langDropdown.onclick = (e) => e.stopPropagation();

  // Translations
  const translations = {
    en: {
      site_title: "Kilinjada Village",
      language_label: "English",
      tamil_option: "Tamil",
      english_option: "English",
      menu_home: "ЁЯПаHome",
      menu_location: "ЁЯУНLocation",
      menu_gallery: "ЁЯУ╕Gallery",
      menu_crops: "ЁЯМ╛Crops",
      menu_bus: "ЁЯЪМBus Timings",
      menu_calendar:"ЁЯУЕ Calendar",
      title: "ЁЯУКVillage Stats",
      name:"Name",
      message:"Your Message",
      menu_weather: "ЁЯМжWeather",
      menu_feedback: "ЁЯТмFeedback",
      welcome_title: "ЁЯМ╛Welcome to Kilinjada Village",
      welcome_description: "A small village blending tradition and natural beauty.",
      location_title: "ЁЯУНKilinjada Location",
      location_button: "Go to Kilinjada",
      gallery_title: "ЁЯУ╕Village Photos",
      season: "ЁЯМ╛Seasonal Crops",
      calendar:"ЁЯУЕ Calendar",
      bus_title: "ЁЯЪМBus Timings",
      bus_from: "From",
    
      bus_to: "To",
      bus_time: "Time",
      note: "Note",
      menu_home2:"ЁЯУКAbout",
      exception: "All the above buses will pass through Kilinjada",
      people: " ЁЯСитАНЁЯСйPeople: <span>400</span>",
      houses: " ЁЯПаHouses: <span>100</span>",
      shops: "ЁЯПк Shops: <span>5</span>",
      weather_title: "ЁЯМжKilinjada Village Weather",
      weather_village: "Kilinjada Village",
      weather_label: "Weather",
      weather_placeholder: "Weather details can be added here.",
      feedback_name_placeholder: "Name",
      feedback_message_placeholder: "Your message",
      feedback_submit: "Submit",
      about_title: "About Kilinjada Village",
          about_title: "About Kilinjada Village",
          feedback:"ЁЯТмfeedback",

                
  fruit_chayote: "Chow chow",
  fruit_guava: "Guava",
  fruit_carrot: "Carrot",
  fruit_cabbage: "Cabbage",
  fruit_cauliflower: "Cauliflower",
  fruit_beans: "Beans",
  fruit_plums: "Plums",
  fruit_potato: "Potato",
  fruit_broccoli: "Broccoli",
  Announcement:"ЁЯЧЮя╕П Announcement",
    about_text: "Kilinjada village is filled with peace and greenery. It is known for traditional farming, culture, kind people, natural beauty, and joyful festivals.",

    // Section titles
    bus_title: "ЁЯЪМ Bus Timings",
    bus_from: "From",
    bus_to: "To",
    bus_time: "Time",
     submit:"submit",
    kil:"ЁЯЪМKilinjada тЮЭ Coonoor",
    coon:"ЁЯЪМCoonoor тЮЭ  Kilinjada",
    show:"ЁЯФБAll busses",
      label_schools: "Schools",
  label_churches: "Churches",
  label_temples: "Temples",
  btn_show_more: "Show More",
  btn_show_less: "Show Less",

    footer:"┬й 2025 Kilnjada Village. All rights are reserved ",

    // Notes
    note: "Note:",
    exception: "All the above buses go via Kilinjada.",
    at_coonoor: "(at Coonoor)",
    at_kilinjada: "(at Kilinjada)",

    // Bus stops (From/To)
    from_1: "Kilinjada",      to_1: "Coonoor",
    from_2: "Coonoor",        to_2: "Kilinjada",
    from_3a: "Coonoor",       to_3a: "Thudurmattam",
    from_3b: "Coonoor",       to_3b: "Thudurmattam",
    from_3c: "Coonoor",       to_3c: "Thudurmattam",
    from_3d: "Coonoor",       to_3d: "Sattan",
    from_3e: "Coonoor",       to_3e: "Thudurmattam",
    from_3f: "Coonoor",       to_3f: "Thudurmattam",
    from_3g: "Coonoor",       to_3g: "Sattan",
    from_3h: "Thudurmattam",  to_3h: "Coonoor",
    from_3i: "Sattan",        to_3i: "Coonoor",
    from_3j: "Palamara",     to_3j: "Coonoor",
    from_3k: "Thudurmattam",  to_3k: "Coonoor",
    from_3l: "Kottakkal",     to_3l: "Coonoor",
    from_4: "Coonoor",        to_4: "Kolacambai",
    from_4b: "Coonoor",       to_4b: "Kolacambai",
    from_4c: "Coonoor",       to_4c: "Kolacambai",
    from_5: "Coonoor",         to_5a: "Kolacambai",
                               to_5b: "Thudurmattam",
     from_5b: "Coonoor",    
     from_5a: "Coonoor",        to_5: "Kolacambai",
    from_6: "Coonoor",        to_6: "Kottakkal",
    about_text:`"Kilinjada Village is a peaceful, green place known for its traditional farming, vibrant culture, kind-hearted people, beautiful scenery, and joyful festivals celebrated together."`
    },
    ta: {
          fruit_chayote: "роЪро╡рпН роЪро╡рпН",
  fruit_guava: "роХрпКропрпНропро╛",
  fruit_carrot: "роХро╛ро░роЯрпН",
  fruit_cabbage: "роорпБроЯрпНроЯрпИроХрпНроХрпЛро╕рпН",
  fruit_cauliflower: "рокрпВроХрпНроХрпЛро╕рпН",
  fruit_beans: "рокрпАройрпНро╕рпН",
  fruit_plums: "рокро┐ро│роорпНро╕рпН",
  fruit_potato: "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ",
  fruit_broccoli: "рокрпНро░рпЛроХрпКро▓ро┐",
      site_title: "роХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН",
      language_label: "родрооро┐ро┤рпН",
      tamil_option: "родрооро┐ро┤рпН",
      english_option: "English",
      menu_home: "ЁЯПароорпБроХрокрпНрокрпБ",
      menu_location: "ЁЯУНроЗроЯроорпН",
       label_schools: "рокро│рпНро│ро┐роХро│рпН",
        name:"рокрпЖропро░рпН",
      message:"роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпБ",
      submit:"роЕройрпБрокрпНрокрпБ",
  label_churches: "родрпЗро╡ро╛ро▓ропроЩрпНроХро│рпН",
  label_temples: "роХрпЛро╡ро┐ро▓рпНроХро│рпН",
  btn_show_more: "роорпЗро▓рпБроорпН роХро╛рогрпНроХ",
  btn_show_less: "роХрпБро▒рпИро╡рпБ роХро╛рогрпНроХ",
      menu_gallery: "ЁЯУ╕рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпН",
      menu_calendar:"ЁЯУЕ роХро╛ро▓рогрпНроЯро░рпН",
      menu_crops: "ЁЯМ╛рокропро┐ро░рпНроХро│рпН",
      menu_bus: "ЁЯЪМрокро╕рпН роирпЗро░роЩрпНроХро│рпН",
      title: "ЁЯУКроХро┐ро░ро╛роо рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
      menu_weather: "ЁЯМжро╡ро╛ройро┐ро▓рпИ",
      menu_feedback: "ЁЯТмроХро░рпБродрпНродрпБроХро│рпН",
      welcome_title: "ЁЯМ╛роХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роородрпНродро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
      welcome_description: "роЗродрпБ роОроЩрпНроХро│рпН рокро╛ро░роорпНрокро░ро┐ропроорпБроорпН, роЗропро▒рпНроХрпИ роЕро┤роХрпБроорпН роЗрогрпИроирпНрод роЪро┐ро▒ро┐роп роХро┐ро░ро╛роороорпН.",
      location_title: "ЁЯУНроХро┐ро│ро┐роЮрпНроЪроЯро╛ роЗроЯроорпН",
      location_button: "роХро┐ро│ро┐роЮрпНроЪроЯро╛ роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН",
      gallery_title: "ЁЯУ╕роХро┐ро░ро╛роородрпНродрпБрокрпН рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпН",
      season: "ЁЯМ╛рокро░рпБро╡ рокропро┐ро░рпНроХро│рпН",
           calendar:"ЁЯУЕ роХро╛ро▓рогрпНроЯро░рпН",
      bus_title: "ЁЯЪМрокро╕рпН роирпЗро░роЩрпНроХро│рпН",
      bus_from: "роОроЩрпНроХро┐ро░рпБроирпНродрпБ",
      bus_to: "роОроЩрпНроХрпЗ",
      bus_time: "роирпЗро░роорпН",


      note: "роХрпБро▒ро┐рокрпНрокрпБ",
      footer:"┬й 2025 роХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН. роЕройрпИродрпНродрпБ роЙро░ро┐роорпИроХро│рпБроорпН рокро╛родрпБроХро╛роХрпНроХрокрпНрокроЯрпНроЯро╡рпИ.",
      exception: "роорпЗро▓рпБро│рпНро│ роЕройрпИродрпНродрпБ рокрпЗро░рпБроирпНродрпБроХро│рпБроорпН роХро┐ро│ро┐роЮрпНроЪроЯро╛ ро╡ро┤ро┐ропро╛роХ роЪрпЖро▓рпНро▓рпБроорпН.",
      people: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСжроороХрпНроХро│рпН: <span>400</span>",
      houses: "ЁЯПаро╡рпАроЯрпБроХро│рпН: <span>100</span>",
      shops: "ЁЯПк роХроЯрпИроХро│рпН: <span>5</span>",
      weather_title: "ЁЯМжроХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН ро╡ро╛ройро┐ро▓рпИ",
      weather_village: "роХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН",
      weather_label: "ро╡ро╛ройро┐ро▓рпИ",
      weather_placeholder: "роЗроЩрпНроХрпБ ро╡ро╛ройро┐ро▓рпИ ро╡ро┐ро╡ро░роЩрпНроХро│рпН роЪрпЗро░рпНроХрпНроХро▓ро╛роорпН.",
      feedback_name_placeholder: "рокрпЖропро░рпН",
      feedback_message_placeholder: "роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпБ",
      feedback_submit: "роЕройрпБрокрпНрокрпБ",
      about_title: "ЁЯУКроХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН рокро▒рпНро▒ро┐",
      at_kilinjada: "(роХро┐ро│ро┐роЮрпНроЪроЯро╛ро╡ро┐ро▓рпН)",
      at_coonoor: "(роХрпБройрпНройрпВро░ро┐ро▓рпН)",
      feedback:"ЁЯТм роХро░рпБродрпНродрпБроХро│рпН",
      menu_home2:"ЁЯУКрокро▒рпНро▒ро┐",

    // Bus stops (From/To)
    from_1: "роХро┐ро│ро┐роЮрпНроЪроЯро╛",      to_1: "роХрпБройрпНройрпВро░рпН",
    from_2: "роХрпБройрпНройрпВро░рпН",        to_2: "роХро┐ро│ро┐роЮрпНроЪроЯро╛",
    from_3a: "роХрпБройрпНройрпВро░рпН",       to_3a: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
    from_3b: "роХрпБройрпНройрпВро░рпН",       to_3b: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
    from_3c: "роХрпБройрпНройрпВро░рпН",       to_3c: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
    from_3d: "роХрпБройрпНройрпВро░рпН",       to_3d: "роЪроЯрпНроЯройрпН",
    from_3e: "роХрпБройрпНройрпВро░рпН",       to_3e: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
    from_3f: "роХрпБройрпНройрпВро░рпН",       to_3f: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
    from_3g: "роХрпБройрпНройрпВро░рпН",       to_3g: "роЪроЯрпНроЯройрпН",
    from_3h: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",  to_3h: "роХрпБройрпНройрпВро░рпН",
    from_3i: "роЪроЯрпНроЯройрпН",         to_3i: "роХрпБройрпНройрпВро░рпН",
    from_3j: "рокро╛ро▓рпНрооро╛ро░ро╛",     to_3j: "роХрпБройрпНройрпВро░рпН",
    from_3k: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",  to_3k: "роХрпБройрпНройрпВро░рпН",
    from_3l: "роХрпЛроЯрпНроЯроХрпНроХро▓рпН",     to_3l: "роХрпБройрпНройрпВро░рпН",
    from_4: "роХрпБройрпНройрпВро░рпН",        to_4: "роХрпКро▓рпИроХро╛роорпНрокрпИ",
    from_4b: "роХрпБройрпНройрпВро░рпН",       to_4b: "роХрпКро▓рпИроХро╛роорпНрокрпИ",
    from_4c: "роХрпБройрпНройрпВро░рпН",       to_4c: "роХрпКро▓рпИроХро╛роорпНрокрпИ",
    from_5: "роХрпБройрпНройрпВро░рпН",
     from_5b: "роХрпБройрпНройрпВро░рпН",        to_5a: "роХрпКро▓рпИроХро╛роорпНрокрпИ",
                               to_5b: "родрпВродрпВро░рпНроороЯрпНроЯроорпН",
     from_5a: "роХрпБройрпНройрпВро░рпН",        to_5: "роХрпКро▓рпИроХро╛роорпНрокрпИ",
    from_6: "роХрпБройрпНройрпВро░рпН",        to_6: "роХрпЛроЯрпНроЯроХрпНроХро▓рпН",
    kil:"ЁЯЪМ роХро┐ро│ро┐роЮрпНроЪроЯро╛ тЮЭ роХрпБройрпНройрпВро░рпН",
    coon:"ЁЯЪМ роХрпБройрпНройрпВро░рпН тЮЭ роХро┐ро│ро┐роЮрпНроЪроЯро╛",
    Announcement:"ЁЯЧЮя╕П роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН",
    show:"ЁЯФБ роОро▓рпНро▓ро╛ рокрпЗро░рпБроирпНродрпБроХро│рпБроорпН",
    about_text:"роХро┐ро│ро┐роЮрпНроЪроЯро╛ роХро┐ро░ро╛роороорпН роЕроорпИродро┐ропрпБроорпН рокроЪрпБроорпИропрпБроорпН роиро┐ро▒рпИроирпНродродрпБ. рокро╛ро░роорпНрокро░ро┐роп ро╡рпЗро│ро╛рогрпНроорпИ, рокрогрпНрокро╛роЯрпБ, роиро▓рпНро▓ро╡ро░рпНроХро│рпН, роЗропро▒рпНроХрпИ роЕро┤роХрпБ, роороХро┐ро┤рпНроЪрпНроЪро┐ропро╛рой родро┐ро░рпБро╡ро┐ро┤ро╛роХрпНроХро│рпН рокрпБроХро┤рпНрокрпЖро▒рпНро▒родрпБ."
     }
  };

  document.querySelectorAll('#langDropdown button').forEach(btn => {
    btn.onclick = function() {
      const lang = this.getAttribute('data-lang');
      setLanguage(lang);
      document.getElementById('langLabel').textContent = this.textContent;
      langDropdown.classList.add('hidden');
    };
  });

  function setLanguage(lang) {
    const dict = translations[lang];
    if (!dict) return;
    document.querySelectorAll('[data-key]').forEach(el => {
      const key = el.getAttribute('data-key');
      if (dict[key]) {
        if (el.tagName === "INPUT" || el.tagName === "TEXTAREA") {
          el.placeholder = dict[key];
        } else if (key === "people" || key === "houses" || key === "shops") {
          el.innerHTML = dict[key];
        } else {
          el.textContent = dict[key];
        }
      }
    });
    document.title = dict.site_title;
  }
});

// 4. Gallery/Crops Scroll Buttons
window.scrollGallery = function(containerId, direction) {
  const container = document.getElementById(containerId);
  if (!container) return;
  const firstChild = container.querySelector(':scope > *');
  const scrollAmount = firstChild ? firstChild.offsetWidth + 32 : 300;
  container.scrollBy({
    left: direction * scrollAmount,
    behavior: 'smooth'
  });
};

// 5. Weather API (WeatherAPI.com)
const weatherApiKey = 'b10632c504034b9ab9a171528250506'; // Replace with your API key
const locationName = "Coimbatore"; // Or use "Kilinjada" if recognized, or lat/lon
async function fetchWeather() {
  try {
    const response = await fetch(
      `https://api.weatherapi.com/v1/current.json?key=${weatherApiKey}&q=${encodeURIComponent(locationName)}&lang=ta`
    );
    if (!response.ok) throw new Error("Weather data not available");
    const data = await response.json();
    const temp = data.current.temp_c;
    const humidity = data.current.humidity;
    const condition = data.current.condition.text;
    const iconUrl = "https:" + data.current.condition.icon;
    document.getElementById("weather_temp").textContent = `${temp} ┬░C`;
    document.getElementById("weather_humidity").textContent = `роИро░рокрпНрокродроорпН: ${humidity}%`;
    document.getElementById("weather_condition").textContent = condition;
    document.getElementById("weather_icon").src = iconUrl;
    document.getElementById("weather_icon").alt = condition;
  } catch (error) {
    document.getElementById("weather_placeholder").textContent = "ро╡ро╛ройро┐ро▓рпИ рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.";
  }
}
fetchWeather();

// 6. Feedback Form (Backendless)
const APP_ID = "F8719370-DAAD-4155-89F8-F6E789F540B4";
const API_KEY = "99384368-B200-4E07-9314-51301C9EA974";



// 7. Announcement ticker fetch
const ANNOUNCE_TABLE = "announcement";
async function fetchLatestAnnouncement() {
  const displayEl = document.getElementById('latestAnnouncement');
  try {
    const response = await fetch(
      `https://api.backendless.com/${APP_ID}/${API_KEY}/data/${ANNOUNCE_TABLE}?pageSize=1&sortBy=created%20desc`
    );
    const data = await response.json();
    if (Array.isArray(data) && data.length > 0) {
      displayEl.textContent = data[0].message;
    } else {
      displayEl.textContent = "роЗрокрпНрокрпЛродрпБ роЕро▒ро┐ро╡ро┐рокрпНрокрпБ роЗро▓рпНро▓рпИ.";
    }
  } catch (error) {
    displayEl.textContent = "роЕро▒ро┐ро╡ро┐рокрпНрокрпИ рокрпЖро▒ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ.";
    console.error(error);
  }
}
fetchLatestAnnouncement();
document.addEventListener("DOMContentLoaded", function () {
  const aboutSection = document.getElementById('about');
  if (aboutSection) {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          aboutSection.classList.add('visible');
          observer.unobserve(aboutSection);
        }
      });
    }, { threshold: 0.15 });
    observer.observe(aboutSection);
  }
});

const CONTACT_TABLE = "contactinfo";

async function fetchContactInfoFooter() {
  const footerEl = document.getElementById('footerContactInfo');
  if (!footerEl) return;

  try {
    const response = await fetch(
      `https://api.backendless.com/${APP_ID}/${API_KEY}/data/${CONTACT_TABLE}?pageSize=1&sortBy=created%20desc`
    );
    const data = await response.json();

    if (Array.isArray(data) && data.length > 0) {
      const email = data[0].email || "рооро┐ройрпНройроЮрпНроЪро▓рпН роЗро▓рпНро▓рпИ";
      footerEl.innerHTML = `
        <div class="flex-1 min-w-[50%] text-center truncate">
          ЁЯУз ${email}
        </div>
      `;
    } else {
      footerEl.innerHTML = `<div class="w-full text-center">родроХро╡ро▓рпН роЗро▓рпНро▓рпИ</div>`;
    }

  } catch (error) {
    console.error(error);
    footerEl.innerHTML = `<span class="text-yellow-400 text-lg font-semibold">рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ</span>`;
  }
}

fetchContactInfoFooter();

// 1. Bus Filter Logic
function filterBus(direction) {
  const rows = document.querySelectorAll("#busTimings tbody tr");

  rows.forEach(row => {
    const note = row.querySelector(".bus-note");
    const noteText = note ? note.textContent.trim() : "";

    let showRow = false;

    if (direction === 'all') {
      showRow = true;
    } else if (direction === 'coonoorToKilinjada') {
      showRow = noteText.includes("роХрпБройрпНройрпВро░ро┐ро▓рпН") || noteText.includes("(at Coonoor)");
    } else if (direction === 'kilinjadaToCoonoor') {
      showRow = noteText.includes("роХро┐ро│ро┐роЮрпНроЪроЯро╛ро╡ро┐ро▓рпН") || noteText.includes("(at Kilinjada)");
    }

    row.style.display = showRow ? "" : "none";
  });

  // Optional: highlight active button
  document.querySelectorAll('.bus-btn').forEach(btn => btn.classList.remove('active'));
  if (direction === 'all') {
    document.getElementById("btnAll").classList.add("active");
  } else if (direction === 'coonoorToKilinjada') {
    document.getElementById("btnCoonoor").classList.add("active");
  } else if (direction === 'kilinjadaToCoonoor') {
    document.getElementById("btnKilinjada").classList.add("active");
  }
}

// 2. Bind Filter Buttons (call this once on DOM load and after language change)
function bindBusFilterButtons() {
  const btnKil = document.getElementById("btnKilinjada");
  const btnCoon = document.getElementById("btnCoonoor");
  const btnAll = document.getElementById("btnAll");

  if (btnKil) btnKil.onclick = () => filterBus("kilinjadaToCoonoor");
  if (btnCoon) btnCoon.onclick = () => filterBus("coonoorToKilinjada");
  if (btnAll) btnAll.onclick = () => filterBus("all");
}

// 3. Re-bind after DOM is ready
document.addEventListener("DOMContentLoaded", function () {
  bindBusFilterButtons();
});


function setLanguage(lang) {
  // ... your existing translation logic ...
  bindBusFilterButtons(); // ЁЯФБ rebind buttons after text changes
}


  //calendar
document.addEventListener("DOMContentLoaded", function () {
  const CALENDAR_TABLE = "calendar";

  let monthsData = [];
  let currentMonthIndex = 0;

  async function fetchMonthsFromBackendless() {
    try {
      const response = await fetch(
        `https://api.backendless.com/${APP_ID}/${API_KEY}/data/${CALENDAR_TABLE}?sortBy=month%20asc`
      );
      const data = await response.json();
      monthsData = data;

      if (monthsData.length > 0) {
        currentMonthIndex = 0;
        renderCalendarMonth();
      } else {
        document.getElementById('calendarMonth').textContent = "No data";
        document.getElementById('calendarEvents').textContent = "";
      }
    } catch (error) {
      document.getElementById('calendarMonth').textContent = "Error loading calendar";
      document.getElementById('calendarEvents').textContent = "";
      console.error("Calendar fetch error:", error);
    }
  }

  function renderCalendarMonth() {
    const monthObj = monthsData[currentMonthIndex];
    document.getElementById('calendarMonth').textContent = monthObj.month;
    document.getElementById('calendarEvents').textContent = monthObj.events || "No events";
  }

  document.getElementById('prevMonth').onclick = function () {
    if (monthsData.length === 0) return;
    currentMonthIndex = (currentMonthIndex - 1 + monthsData.length) % monthsData.length;
    renderCalendarMonth();
  };

  document.getElementById('nextMonth').onclick = function () {
    if (monthsData.length === 0) return;
    currentMonthIndex = (currentMonthIndex + 1) % monthsData.length;
    renderCalendarMonth();
  };

  // тЬЕ CALL IT HERE directly
  fetchMonthsFromBackendless();
});


  function scrollGallery(containerId, direction) {
    const container = document.getElementById(containerId);
    const scrollAmount = container.querySelector('.gallery-img-xl')?.offsetWidth + 24 || 320;
    container.scrollBy({ left: direction * scrollAmount, behavior: 'smooth' });
  }
const TABLE2_NAME = 'VillageStats';

const fetchVillageStats = async () => {
  try {
    const response = await fetch(`https://api.backendless.com/${APP_ID}/${API_KEY}/data/${TABLE2_NAME}`);
    const data = await response.json();
    const stats = data[0];

    if (stats) {
      document.getElementById("statPeople").textContent = stats.people ?? '--';
      document.getElementById("statHouses").textContent = stats.houses ?? '--';
      document.getElementById("statShops").textContent = stats.shops ?? '--';
      document.getElementById("statSchools").textContent = stats.schools ?? '--';
      document.getElementById("statChurches").textContent = stats.churches ?? '--';
      document.getElementById("statTemples").textContent = stats.temples ?? '--';
    }
  } catch (err) {
    console.error("Error loading village stats:", err);
  }
};

document.addEventListener("DOMContentLoaded", () => {
  fetchVillageStats();

  const toggleBtn = document.getElementById("toggleStatsBtn");
  const extraStats = document.querySelectorAll(".extra-stat");
  let expanded = false;

  toggleBtn.addEventListener("click", () => {
    extraStats.forEach(card => {
      card.classList.toggle("show");
    });
    expanded = !expanded;
    toggleBtn.textContent = expanded ? "роХрпБро▒рпИро╡рпБ роХро╛рогрпНроХ" : "роорпЗро▓рпБроорпН роХро╛рогрпНроХ";
    toggleBtn.setAttribute("data-key", expanded ? "btn_show_less" : "btn_show_more");
  });
});

  const form = document.getElementById("feedbackForm");
  const status = document.getElementById("feedbackStatus");
  const submitBtn = form.querySelector("button");

  form.addEventListener("submit", function (e) {
    e.preventDefault();

    // 1. Immediately show sending message
    status.textContent = "ЁЯУд роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ...";
    status.classList.remove("hidden");
    submitBtn.disabled = true;
    submitBtn.textContent = "роЕройрпБрокрпНрокрпБроХро┐ро▒родрпБ...";

    fetch(form.action, {
      method: "POST",
      body: new FormData(form),
    })
    .then(response => response.text())
    .then(data => {
      if (data === "Success") {
        // 2. Show success message
        status.textContent = "ЁЯЩП роЙроЩрпНроХро│рпН роХро░рпБродрпНродрпБроХрпНроХрпБ роиройрпНро▒ро┐! роЕродрпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЕройрпБрокрпНрокрокрпНрокроЯрпНроЯродрпБ.";
        form.reset();
      } else {
        status.textContent = "тЭМ роЕройрпБрокрпНрок роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. рокро┐ройрпНройро░рпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.";
      }
    })
    .catch(() => {
      status.textContent = "тЪая╕П рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ!";
    })
    .finally(() => {
      // 3. Enable button again after 3s
      submitBtn.disabled = false;
      submitBtn.textContent = "роЕройрпБрокрпНрокрпБ";
    });
  });

